1. СБОРКА ПАКЕТОВ

В контексте языка Python термин сборка означает сохранение
созданных вами модулей в стандартном формате для того,
чтобы другие программисты могли их легко установить и использовать.

Для этого используются модули setuptools и distutils.

При сборке первым делом нужно правильно организовать существующие файлы.
Поместите все файлы, которые нужно запаковать в библиотеку,
в один родительский каталог. Этот каталог должен также содержать
файл с именем __init__.py; он может быть пустым, но он обязательно
должен присутствовать в каталоге.

Этот каталог должен находиться в другом каталоге,
содержащем файлы readme и license, а также важный файл под названием setup.py.

Пример структуры каталогов:
MyProject/
    LICENSE.txt
    README.txt
    setup.py
    myproject/
        __init__.py
        myproject.py
        myproject2.py

Следующим шагом вам нужно написать файл setup.py.

Этот документ содержит информацию, необходимую для сборки пакета,
и чтобы он позже мог быть загружен в каталог PyPI и установлен
с помощью pip (имя, версия и т.д.).

Файл setup.py может выглядеть вот так:

from distutils.core import setup

setup(
    name='MyProject',
    version='0.1dev',
    packages=['myproject',],
    license='MIT',
    long_description=open('README.txt').read(),
)

Создав файл setup.py, загрузите его в каталог PyPI или с помощью
командной строки создайте двоичный дистрибутив (исполняемый установочный файл).

Чтобы собрать дистрибутив с исходным кодом, с помощью командной строки
перейдите к каталогу, содержащему файл setup.py, и выполните команду:

python setup.py sdist

Запустите команду python setup.py bdist (или для Windows -
python setup.py bdist_wininst), чтобы создать двоичный дистрибутив.

Чтобы загрузить пакет, используйте команду:

python setup.py register

затем:

python setup.py sdist upload

Наконец, пакет устанавливается командой:

python setup.py install

2. СБОРКА ДЛЯ ПОЛЬЗОВАТЕЛЕЙ

В предыдущем разделе мы рассмотрели, как делать упаковку модулей
для использования другими Python-программистами.
Тем не менее на компьютерах многих рядовых пользователей нет
установленного Python. Поэтому целесообразно упаковывать сценарии в виде
исполняемых файлов для соответствующих платформ, таких как
операционные системы Windows или Mac. Нет необходимости делать это
для платформы Linux, так как у большинства пользователей Linux есть
установленный Python и возможность запускать скрипты.

У пользователей Windows есть широкий выбор инструментов для
преобразования скриптов в исполняемые файлы. Например, py2exe может
быть использован для упаковки сценариев Python и нужных библиотек в
единый исполняемый файл. PyInstaller и cx_Freeze также могут использоваться
для этой цели.

Пользователи Mac могут использовать py2app, PyInstaller или cx_Freeze.
